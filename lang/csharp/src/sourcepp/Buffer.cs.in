using System;
using System.Runtime.InteropServices;

/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 *                        DO NOT EDIT THIS FILE
 *                         IT IS AUTOGENERATED
 *                             THANK YOU
 *
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

namespace ${TARGET}.sourcepp
{
    internal static unsafe partial class Extern
    {
        [LibraryImport("sourcepp_${TARGET}c", EntryPoint = "sourcepp_buffer_new")]
        public static partial Buffer BufferNew(ulong size);

        [LibraryImport("sourcepp_${TARGET}c", EntryPoint = "sourcepp_buffer_free")]
        public static partial void BufferFree(Buffer* str);
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct Buffer
    {
        public long size;
        public unsafe byte* data;
    }

    internal static unsafe class BufferUtils
    {
        public static byte[] ConvertToArrayAndDelete(ref Buffer buffer)
        {
            var result = new Span<byte>(buffer.data, (int) buffer.size).ToArray();

            fixed (Buffer* bufferPtr = &buffer)
            {
                Extern.BufferFree(bufferPtr);
            }

            return result;
        }
    }
}
